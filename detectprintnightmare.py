from impacket.http import AUTH_NTLM
from impacket.examples import logger
from impacket import uuid, version
from impacket.dcerpc.v5 import transport, epm
from impacket.dcerpc.v5.rpch import RPC_PROXY_INVALID_RPC_PORT_ERR, RPC_PROXY_CONN_A1_0X6BA_ERR, RPC_PROXY_CONN_A1_404_ERR
import sys
import argparse
import ipaddress

parser = argparse.ArgumentParser()
parser.add_argument("-t","--target", help="Single IP",type=str)
parser.add_argument("-T","--targets", help="List of IP in text file",type=str)
parser.add_argument("-c","--cidr", help="CIDR range",type=str)
args = parser.parse_args()

if len(sys.argv) < 2:
    parser.print_help()
    sys.exit(1)

def fileload(filename):
    f= open(filename, "r")
    content=f.read()
    f.close()
    content=content.split("\n")
    while("" in content):
        content.remove("")
    return content

ip = str(sys.argv[1])

def exploit(ip):
    username = ''
    password = ''
    port = 135

    KNOWN_PROTOCOLS = {
            135: {'bindstr': r'ncacn_ip_tcp:%s[135]'},
            139: {'bindstr': r'ncacn_np:%s[\pipe\epmapper]'},
            443: {'bindstr': r'ncacn_http:[593,RpcProxy=%s:443]'},
            445: {'bindstr': r'ncacn_np:%s[\pipe\epmapper]'},
            593: {'bindstr': r'ncacn_http:%s'}
            }

    entries = []

    stringbinding = KNOWN_PROTOCOLS[port]['bindstr'] % ip
    rpctransport = transport.DCERPCTransportFactory(stringbinding)

    try:
        rpctransport.set_credentials(username, password)
        rpctransport.setRemoteHost(ip)
        rpctransport.set_dport(port)
        dce = rpctransport.get_dce_rpc()
        dce.connect()
        resp = epm.hept_lookup(None, dce=dce)
        dce.disconnect()

    except:
        pass

    try:
        endpoints = {}
        entries = resp
        for entry in entries:
            binding = epm.PrintStringBinding(entry['tower']['Floors'])
            tmpUUID = str(entry['tower']['Floors'][0])
            if (tmpUUID in endpoints) is not True:
                endpoints[tmpUUID] = {}
                endpoints[tmpUUID]['Bindings'] = list()
            else:
                pass
            if uuid.uuidtup_to_bin(uuid.string_to_uuidtup(tmpUUID))[:18] in epm.KNOWN_UUIDS:
                endpoints[tmpUUID]['EXE'] = epm.KNOWN_UUIDS[uuid.uuidtup_to_bin(uuid.string_to_uuidtup(tmpUUID))[:18]]
            else:
                endpoints[tmpUUID]['EXE'] = 'N/A'
            endpoints[tmpUUID]['annotation'] = entry['annotation'][:-1].decode('utf-8')
            endpoints[tmpUUID]['Bindings'].append(binding)
            if tmpUUID[:36] in epm.KNOWN_PROTOCOLS:
                endpoints[tmpUUID]['Protocol'] = epm.KNOWN_PROTOCOLS[tmpUUID[:36]]
            else:
                endpoints[tmpUUID]['Protocol'] = "N/A"
        for endpoint in list(endpoints.keys()):
            if endpoints[endpoint]['Protocol'] == "[MS-RPRN]: Print System Remote Protocol":
                
                print(ip+" is Vulnerable to CVE-2021-1675")
    except:
        pass
            
if __name__=="__main__":
    info=dict()

    if args.target:
        ip_list=[args.target]
        
    if args.targets:
        ip_list=fileload(args.targets)
               
    if args.cidr:
        ip_list=[str(ip) for ip in ipaddress.IPv4Network(args.cidr)]

    for ip in ip_list:
        port=exploit(ip)
    

        
